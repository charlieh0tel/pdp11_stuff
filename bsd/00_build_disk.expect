#!/usr/bin/expect 

set timeout -1

source config.tcl
source lib.tcl

exec touch $disk_image
exec fallocate -z  -l $disk_size_bytes $disk_image

spawn pdp11 simh.ini

# 2.1.2. Step 2: creating the disk label
boot "ts0" "ts(0,1)"

expect "Disk? "
send "ra(0,0)\r"
expect -ex {Proceed? [y/n] }
send "y"

expect "d(isplay) D(efault) m(odify) w(rite) q(uit)? "
send "d"
expect "d(isplay) D(efault) m(odify) w(rite) q(uit)? "
send "D"
expect "d(isplay) D(efault) m(odify) w(rite) q(uit)? "
send "d"

expect "d(isplay) D(efault) m(odify) w(rite) q(uit)? "
send "m"
expect "d(isplay) g(eometry) m(isc) p(artitions) q(uit)? "
send "m"
expect "d(isplay) t(ype) n(ame) l(abel) f(lags) r(pm) D(rivedata) q(uit)? "
send "l"
expect -ex {label [DEFAULT]: }
send "$label\r"
expect "d(isplay) t(ype) n(ame) l(abel) f(lags) r(pm) D(rivedata) q(uit)? "
send "q"
expect "d(isplay) g(eometry) m(isc) p(artitions) q(uit)? "
send "d"

proc mkpart {part offset size type} {
    expect "d(isplay) g(eometry) m(isc) p(artitions) q(uit)? "
    send "p"
    expect "d(isplay) n(umber) s(elect) q(uit)? "
    send "s"
    send $part
    expect "d(isplay) z(ero) t(ype) o(ffset) s(ize) f(rag) F(size) q(uit)? "
    send "o"
    expect ": "
    send "$offset\r"
    expect "d(isplay) z(ero) t(ype) o(ffset) s(ize) f(rag) F(size) q(uit)? "
    send "s"
    expect ": "
    send "$size\r"
    expect "d(isplay) z(ero) t(ype) o(ffset) s(ize) f(rag) F(size) q(uit)? "
    send "t"
    expect ": "
    send "$type\r"
    expect "d(isplay) z(ero) t(ype) o(ffset) s(ize) f(rag) F(size) q(uit)? "
    send "q"
    expect "d(isplay) n(umber) s(elect) q(uit)? "
    send "q"
}

mkpart $root_part $root_start $root_size "2.11BSD"
mkpart $swap_part $swap_start $swap_size "swap"
mkpart $whole_part 0 $whole_size "unused"
mkpart $usr_part $usr_start $usr_size "2.11BSD"

expect "d(isplay) g(eometry) m(isc) p(artitions) q(uit)? "
send "q"
expect "d(isplay) D(efault) m(odify) w(rite) q(uit)? "
send "w"
expect "d(isplay) D(efault) m(odify) w(rite) q(uit)? "
send "d"
expect "d(isplay) D(efault) m(odify) w(rite) q(uit)? "
send "q"
expect ": "

send ""
expect "sim> "
